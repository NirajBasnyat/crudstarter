<?php

namespace App\Http\Controllers\{{folderName}};

use Illuminate\View\View;
use Illuminate\Http\Request;
use Illuminate\Http\RedirectResponse;
use App\Models\{{modelName}};
use App\Http\Controllers\Controller;
use App\Http\Requests\{{folderName}}\{{modelName}}StoreRequest;
use App\Http\Requests\{{folderName}}\{{modelName}}UpdateRequest;
{{statusChangeTraitImport}}

class {{modelName}}Controller extends Controller
{
    {{statusChangeTrait}}
    public function index(Request $request): View
    {
        return view('{{folderNameSnakeCase}}.{{modelNameSingularLowerCase}}.index', [
            '{{modelNamePluralLowerCase}}' => {{modelName}}::when($request->has('archive'), function($query){
                $query->onlyTrashed();
             })
             ->get()
        ]);
    }

    public function create() : View
    {
        return view('{{folderNameSnakeCase}}.{{modelNameSingularLowerCase}}.create'{{createMethodCode}}
    }

    public function store({{modelName}}StoreRequest $request) : RedirectResponse
    {
        {{storeMethodCode}}

        return redirect()->route('{{folderNameSnakeCase}}.{{modelNamePluralKebabCase}}.index')->with('success', '{{modelName}} Created Successfully!');
    }

    public function show({{modelName}} ${{modelNameSingularLowerCase}}) : View
    {
        return view('{{folderNameSnakeCase}}.{{modelNameSingularLowerCase}}.show', compact('{{modelNameSingularLowerCase}}'));
    }

    public function edit({{modelName}} ${{modelNameSingularLowerCase}}) : View
    {
        return view('{{folderNameSnakeCase}}.{{modelNameSingularLowerCase}}.edit', {{editMethodCode}}
    }

    public function update({{modelName}}UpdateRequest $request, {{modelName}} ${{modelNameSingularLowerCase}}) : RedirectResponse
    {
        {{updateMethodCode}}

        return redirect()->route('{{folderNameSnakeCase}}.{{modelNamePluralKebabCase}}.index')->with('success', '{{modelName}} Updated Successfully!');
    }

    public function destroy({{modelName}} ${{modelNameSingularLowerCase}}) : RedirectResponse
    {
        ${{modelNameSingularLowerCase}}->delete();

        return redirect()->route('{{folderNameSnakeCase}}.{{modelNamePluralKebabCase}}.index')->with('error', '{{modelName}} Deleted Successfully!');
    }

    public function restore($id) : RedirectResponse
    {
        ${{modelNameSingularLowerCase}} = {{modelName}}::onlyTrashed()->findOrFail($id);
        ${{modelNameSingularLowerCase}}->restore();

        return redirect()->route('{{folderNameSnakeCase}}.{{modelNamePluralKebabCase}}.index')->with('success', '{{modelName}} Restored Successfully!');
    }

    public function forceDelete($id) : RedirectResponse
    {
        ${{modelNameSingularLowerCase}} = {{modelName}}::onlyTrashed()->findOrFail($id);
        {{deleteMethodCode}}
        ${{modelNameSingularLowerCase}}->forceDelete();

        return redirect()->route('{{folderNameSnakeCase}}.{{modelNamePluralKebabCase}}.index')->with('error', '{{modelName}} Eliminated Successfully!');
    }

    /*
    public function trashed(): View
    {
        ${{modelNameSingularLowerCase}} = {{modelName}}::onlyTrashed()->get();

        return view('{{folderNameSnakeCase}}.{{modelNameSingularLowerCase}}.trash', compact('{{modelNameSingularLowerCase}}'));
    }
    */
    {{statusChangeMethodCode}}
}
